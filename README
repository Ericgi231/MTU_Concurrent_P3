Question 1:
When done the dumb way there are no race conditons.
A race condtion implies two or more processes are manipulating
the same value at the same time and order matters.
Because we seperated the even and odd passes,
no two values are edited at the same time.
The even pass will look at every value in the array.
Odd will also look at every value in the array.
But odd can not start until even has closed all of their threads.

Question 2:
The algorithm can only ever swap values such that the order
is closer to correct.
Each iteration covers every value except in some cases the first or last.
In the worst case, the largest value is at index 0 or the 
smallest value is at index n.
Because values out of place will always be swapped for better, at most
the extreme cases will require n swaps for them to move n places.

Question 3:
Yes it is possible to use only n/2 threads without risking race conditions.
You would need to track which indexes are currently being touched.
Based on this, you could hold threads until the values they need
are no longer being toched in another thread.
Both passes touch i and i-1.
Therefor before any thread can be assigned work, 
both i and i-1 must not be currently maniuplated by a thread.
Of course another thread must also be free for use.

Question 4:
Yes it is possible, though many global variables would be needed.
I would use a flag to determine whether it is an even or odd pass.
Each thread would also need a flag to determine if they are still working.
At the start, each thread would be assigned indexes 
starting at 1 and incrementing by 2 until > n
aka: 1 3 5 7 ... (n or n-1)
Each thread contains a loop that runs until the array is sorted.
The loop starts by setting working to false then waits for 
every loop to have a working of false.
Once every thread is not working, they all begin work.
Once they complete their work, they return to not working.
Every time all threads are not working, the flag for even/odd pass flips.
When on even pass, each thread compares their i and i-1.
When on odd pass, each thread compares their i and i+1.
This method prevents race condtions because each value
i is always 2 away from another i and comparisons can
only occur with two adjacent i's.
On top of this, because the even and odd passes are seperate,
There can never be a case where an i+1 and i-1 are being manipulated 
at the same time